import { RouteReuseStrategy, DefaultUrlSerializer, ActivatedRouteSnapshot, DetachedRouteHandle } from '@angular/router';
export class AppRoutingCache implements RouteReuseStrategy {
  public static handlers: { [key: string]: DetachedRouteHandle } = {};
  private static waitDelete: string;
  public static deleteRouteSnapshot(name: string): void {
    if (AppRoutingCache.handlers[name]) {
      delete AppRoutingCache.handlers[name];
    } else {
      AppRoutingCache.waitDelete = name;
    }
  }
  // 表示对路由允许复用
  public shouldDetach(route: ActivatedRouteSnapshot): boolean {
    // 默认对所有路由复用 可通过给路由配置项增加data: { keep: true }来进行选择性使用，代码如下
    if (!route.data.keep) {
      return false;
    }
    if (!route.routeConfig || route.routeConfig.loadChildren || route.routeConfig.children) {
      return false;
    }
    return true;
  }
  // 当路由离开时会触发。按path作为key存储路由快照&组件当前实例对象
  public store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle): void {
    if (AppRoutingCache.waitDelete && AppRoutingCache.waitDelete == this.getRouteUrl(route)) {
      // 如果待删除是当前路由则不存储快照
      AppRoutingCache.waitDelete = null;
      return;
    }
    AppRoutingCache.handlers[this.getRouteUrl(route)] = handle;
  }
  // 若path在缓存中有的都认为允许还原路由
  public shouldAttach(route: ActivatedRouteSnapshot): boolean {
    return !!route.routeConfig && !!AppRoutingCache.handlers[this.getRouteUrl(route)];
  }
  // 从缓存中获取快照，若无则返回null
  public retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle {
    // console.log(route);
    if (!route.routeConfig) { return null; }
    if (route.routeConfig.loadChildren) { return null; }
    if (route.routeConfig.children) { return null; }
    return AppRoutingCache.handlers[this.getRouteUrl(route)];
  }
  // 进入路由触发，判断是否同一路由
  public shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {
    if (future.routeConfig !== curr.routeConfig &&
      !((future.routeConfig.path === 'report' && curr.routeConfig.path === 'student_score')
        || (future.routeConfig.path === 'student_score' && curr.routeConfig.path === 'report'))) {
      delete AppRoutingCache.handlers[this.getRouteUrl(curr)];
    }
    return future.routeConfig === curr.routeConfig &&
      JSON.stringify(future.params) === JSON.stringify(curr.params);
  }

  private getRouteUrl(route: ActivatedRouteSnapshot) {
    return route['_routerState'].url.replace(/\//g, '_');
  }

}
